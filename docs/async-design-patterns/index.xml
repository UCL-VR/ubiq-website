<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Async Design Patterns on</title><link>https://ubiq.online/docs/async-design-patterns/</link><description>Recent content in Async Design Patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 20 Apr 2020 11:53:07 +0200</lastBuildDate><atom:link href="https://ubiq.online/docs/async-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Pattern</title><link>https://ubiq.online/docs/async-design-patterns/design-pattern/</link><pubDate>Mon, 21 Sep 2020 16:00:43 +0200</pubDate><guid>https://ubiq.online/docs/async-design-patterns/design-pattern/</guid><description>Asynchronous Design Patterns in Unity The Unity process manages the main thread, which begins before any user code is executed. Most Unity resources can only be accessed from the main thread; an exception will be thrown otherwise. There are still many possibilities for writing aysnchronous code however.
Design Pattern Delayed initialisation with callbacks. Mimics the do-then pattern in JS. Methods are called which take Actions. Those Actions are initialised by lambdas.</description></item></channel></rss>