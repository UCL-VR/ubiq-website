<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Logging on</title><link>https://ubiq.online/docs/logging/</link><description>Recent content in Logging on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 20 Apr 2020 11:52:49 +0200</lastBuildDate><atom:link href="https://ubiq.online/docs/logging/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://ubiq.online/docs/logging/introduction/</link><pubDate>Mon, 21 Sep 2020 13:58:42 +0200</pubDate><guid>https://ubiq.online/docs/logging/introduction/</guid><description>Networked VR applications require different types of logging, such as:
Debug Logs
Experiment Logs
Network Traces
Refers to logging expected and exceptional events that occur during a regular session. The purpose is post-hoc debugging of high-level application code.
Refers to logging application-specific data, such as measurements or questionnaire responses for an experiment.
Refers to captures of network traffic to investigate reproducible low-level netcode bugs.</description></item><item><title>Analysis</title><link>https://ubiq.online/docs/logging/analysis/</link><pubDate>Mon, 21 Sep 2020 13:58:42 +0200</pubDate><guid>https://ubiq.online/docs/logging/analysis/</guid><description>The Event Logger outputs structured logs, as Json objects. These can be processed on any platform that can read Json files.
A sample log file is shown below.
[ {&amp;#34;ticks&amp;#34;:637599657099341295,&amp;#34;type&amp;#34;:&amp;#34;Ubiq.Messaging.NetworkScene&amp;#34;,&amp;#34;event&amp;#34;:&amp;#34;Awake&amp;#34;,&amp;#34;arg1&amp;#34;:&amp;#34;0112f691-0c94838b&amp;#34;,&amp;#34;arg2&amp;#34;:&amp;#34;DESKTOP-F1J0MRR&amp;#34;,&amp;#34;arg3&amp;#34;:&amp;#34;System Product Name (ASUS)&amp;#34;,&amp;#34;arg4&amp;#34;:&amp;#34;f73fe01b1e21031d49274a1491d1d6b5714c92e9&amp;#34;}, {&amp;#34;ticks&amp;#34;:637599657429701260,&amp;#34;type&amp;#34;:&amp;#34;Ubiq.Voip.VoipPeerConnectionManager&amp;#34;,&amp;#34;sceneid&amp;#34;:&amp;#34;0112f691-0c94838b&amp;#34;,&amp;#34;objectid&amp;#34;:&amp;#34;0112f691-0c94838b&amp;#34;,&amp;#34;componentid&amp;#34;:50,&amp;#34;event&amp;#34;:&amp;#34;CreatePeerConnectionForRequest&amp;#34;,&amp;#34;arg1&amp;#34;:&amp;#34;7a577253-a3a38c7f&amp;#34;}, {&amp;#34;ticks&amp;#34;:637599657364232680,&amp;#34;type&amp;#34;:&amp;#34;Ubiq.Messaging.NetworkScene&amp;#34;,&amp;#34;event&amp;#34;:&amp;#34;Awake&amp;#34;,&amp;#34;arg1&amp;#34;:&amp;#34;53c9dddd-a62bb937&amp;#34;,&amp;#34;arg2&amp;#34;:&amp;#34;Oculus Quest&amp;#34;,&amp;#34;arg3&amp;#34;:&amp;#34;Oculus Quest&amp;#34;,&amp;#34;arg4&amp;#34;:&amp;#34;b8db4746286db62ecad4c6fa13f17ab6&amp;#34;}, {&amp;#34;ticks&amp;#34;:637599657421868190,&amp;#34;type&amp;#34;:&amp;#34;Ubiq.Voip.VoipPeerConnectionManager&amp;#34;,&amp;#34;sceneid&amp;#34;:&amp;#34;53c9dddd-a62bb937&amp;#34;,&amp;#34;objectid&amp;#34;:&amp;#34;53c9dddd-a62bb937&amp;#34;,&amp;#34;componentid&amp;#34;:50,&amp;#34;event&amp;#34;:&amp;#34;CreatePeerConnectionForPeer&amp;#34;,&amp;#34;arg1&amp;#34;:&amp;#34;7a577253-a3a38c7f&amp;#34;,&amp;#34;arg2&amp;#34;:&amp;#34;0112f691-0c94838b&amp;#34;}, {&amp;#34;ticks&amp;#34;:637599657422314320,&amp;#34;type&amp;#34;:&amp;#34;Ubiq.Voip.VoipPeerConnectionManager&amp;#34;,&amp;#34;sceneid&amp;#34;:&amp;#34;53c9dddd-a62bb937&amp;#34;,&amp;#34;objectid&amp;#34;:&amp;#34;53c9dddd-a62bb937&amp;#34;,&amp;#34;componentid&amp;#34;:50,&amp;#34;event&amp;#34;:&amp;#34;RequestPeerConnection&amp;#34;,&amp;#34;arg1&amp;#34;:&amp;#34;7a577253-a3a38c7f&amp;#34;,&amp;#34;arg2&amp;#34;:&amp;#34;0112f691-0c94838b&amp;#34;} ] In this example, two peers - a desktop PC (Unity Editor) and an Oculus Quest - join a room. The NetworkScene and VoipPeerConnectionManager both log events. To collect these logs, a new LogCollector was added to a new GameObject and the Start Collection button pressed.</description></item><item><title>Examples</title><link>https://ubiq.online/docs/logging/examples/</link><pubDate>Mon, 21 Sep 2020 13:58:42 +0200</pubDate><guid>https://ubiq.online/docs/logging/examples/</guid><description>Questionnaire The Questionnaire Sample (Samples/Single/Questionnaire) shows how the Event Logging System may be used to collect questionnaire responses.
This scene contains a panel with an example Component, Questionnaire attached to it. The Component iterates over all Slider instances under its GameObject, and uses a UserEventLogger to write their values when the user clicks Done.
public class Questionnaire : MonoBehaviour { EventLogger results; // Start is called before the first frame update void Start() { results = new UserEventLogger(this); } public void Done() { foreach (var item in GetComponentsInChildren&amp;lt;Slider&amp;gt;()) { results.</description></item><item><title>Serialisation and Memory</title><link>https://ubiq.online/docs/logging/serialisation/serialisation/</link><pubDate>Mon, 21 Sep 2020 13:58:42 +0200</pubDate><guid>https://ubiq.online/docs/logging/serialisation/serialisation/</guid><description>Serialiser The logging functionality uses a custom Json serialiser that facilitates building Json objects across multiple function calls.
This is based on neuecc&amp;rsquo;s Utf8Json, but with modifications to track memory usage and remove code generation requirements.
The Utf8Json serialiser is in the Ubiq.Logging.Utf8Json namspace. It is not recommended to use the serialiser for purposes other than logging; import an unmodified version of the library separately instead.
Formatters Libraries such as Utf8Json typically have methods that serialise and deseralise specific types by sequentially reading and writing tokens to and from streams.</description></item></channel></rss>