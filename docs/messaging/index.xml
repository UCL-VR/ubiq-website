<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Messaging on</title><link>https://ubiq.online/docs/messaging/</link><description>Recent content in Messaging on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 20 Apr 2020 11:52:58 +0200</lastBuildDate><atom:link href="https://ubiq.online/docs/messaging/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://ubiq.online/docs/messaging/introduction/</link><pubDate>Mon, 21 Sep 2020 16:00:43 +0200</pubDate><guid>https://ubiq.online/docs/messaging/introduction/</guid><description>Ubiq is built around message-based exchanges on unicast connections between peers (and servers). Messages are variable size with binary payloads. All messages passed by Ubiq have the same header.
The Medium is the Message Ubiq delivers individual messages between instances of networked objects (most commonly Unity Components). How messages get from Component A to Component B is the responsiblity of the Messaging Layer, and is abstracted from the developer.
Network Components only recieve messages addressed to them directly, so they can rely on knowing the type of the message by virtue of having recieved it.</description></item><item><title>Object and Component Ids</title><link>https://ubiq.online/docs/messaging/ids/</link><pubDate>Mon, 21 Sep 2020 16:00:43 +0200</pubDate><guid>https://ubiq.online/docs/messaging/ids/</guid><description>Network Object Ids are analogous to GameObject instance Ids, and are intended to be initialised late. For example, a spawner instantiates a prefab, then set its Id. Object Ids are represented by the NetworkId type.
Component Ids are analogous to class types and are intended to be fixed at design time. They should be unique within a single application. Component Ids are set by the NetworkComponentId Attribute, and so Ubiq can infer the Id from the type.</description></item><item><title>Generating Unique Ids</title><link>https://ubiq.online/docs/messaging/generating-ids/</link><pubDate>Mon, 21 Sep 2020 16:00:43 +0200</pubDate><guid>https://ubiq.online/docs/messaging/generating-ids/</guid><description>Unique Ids The main considerations of Object Ids are the practices for generating UUIds, collision probabilities and bit sizes.
Collision Probability Each client must be able to generate new Ids independently, to avoid dependencies on a server in peer-to-peer situations, and to avoid introducing deadlocks with the Unity programming model (such as needing a server to respond before all Start() calls can finish).
The probability of collisions between two independently well-generated identifiers is the Birthday Problem.</description></item><item><title>Types</title><link>https://ubiq.online/docs/messaging/types/</link><pubDate>Mon, 21 Sep 2020 16:00:43 +0200</pubDate><guid>https://ubiq.online/docs/messaging/types/</guid><description>Network and Component Types Network Ids Network Ids are 64-bit identifiers. They are represented by the Ubiq.Messaging.NetworkId structure in C# and the Messaging.NetworkId class in Javascript.
In C# Ids are value types, and the equality operators are overridden. In Javascript they are reference types and must be explicitly compared using the static NetworkId.Compare method.
NetworkId.Compare(message.objectId, server.objectId) Internally, the types are represented by two 32 bit integers. This is an implementation detail and should not be relied upon.</description></item><item><title>Reserved IDs</title><link>https://ubiq.online/docs/messaging/reserveids/</link><pubDate>Mon, 21 Sep 2020 16:00:43 +0200</pubDate><guid>https://ubiq.online/docs/messaging/reserveids/</guid><description>Common Ids A number of Ids are pre-assigned to common objects in Ubiq. These are listed below.
Network Ids RoomServer: 0000-0000-0000-0001 NetworkSpawner : a369-2643-7725-a971 LogCollector: fc26-78b8-4498-9953 LogManager: 92e9-e831-8281-2761 Known Component Ids RoomClient : 1 AvatarManager : 2</description></item></channel></rss>